}
runGadget(ui, server)
}
myFirstGadget()
library(shiny)
library(miniUI)
multiplyNumbers <- function() {
ui <- miniPage(
gadgetTitleBar("Multiply 2 numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices = numbers1),
selectInput("num2", "Second Number", coices = numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1*num2)
})
}
runGadget(ui, server)
}
multiplyNumbers()
multiplyNumbers(3.556465, 4)
library(shiny)
library(miniUI)
multiplyNumbers <- function() {
ui <- miniPage(
gadgetTitleBar("Multiply 2 numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices = numbers1),
selectInput("num2", "Second Number", choices = numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1*num2)
})
}
runGadget(ui, server)
}
multiplyNumbers(3.556465, 4)
multiplyNumbers()
multiplyNumbers(1:10, 1:10)
multiplyNumbers(1:10, 1:10)
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply 2 numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices = numbers1),
selectInput("num2", "Second Number", choices = numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1*num2)
})
}
runGadget(ui, server)
}
multiplyNumbers(1:10, 1:10)
runApp('Month 9 - Data Products/Week4_PA')
head(swiss)
plot(sin(1))
x = runif(100, 1)
x
x = runif(100)
x
plot(sin(x))
y = sin(x)
plot(y)
plot(x,y)
plot(y,x)
plot(y,sin()x)
plot(y,sin(x))
plot(y)
plot(x,y)
?runif
x = runif(1000, min = -6, max = 6)
plot(y)
plot(x,y)
y
y = sin(x)
y
plot(x,y)
y
qplot(x, y)
library(ggplot2)
qplot(x, y)
qplot(x, y, color = "blue")
qplot(x, y, color = "red")
qplot(x, y, color = "x")
qplot(x, y, color = "y")
qplot(x, y, color = y)
qplot(x, y, color = x)
qplot(x, y, geom = "smooth")
qplot(x, y, geom = "jitter")
qplot(x, y, geom = "boxplot")
qplot(x, y, geom = "line")
qplot(x, y, geom = "point")
qplot(x, y, geom = "bar")
qplot(x, y, fill = "red")
qplot(x, y, fill = "blue")
qplot(x, y, fill = "blue", color = "red")
qplot(x, y, fill = "blue", color = red)
qplot(x, y)
faithful[,2]
runApp('Month 9 - Data Products/test2')
runApp('Month 9 - Data Products/test2')
length(faithful$eruptions)
plot(x, y, col = 'blue', border = 'orange')
plot(x, y, col = 'blue', pch = 2)
plot(x, y, col = 'blue', pch = '2')
plot(x, y, col = 'blue', pch = '$')
plot(x, y, col = 'blue', pch = '.')
plot(x, y, col = 'blue', pch = '5')
plot(x, y, col = 'blue', pch = '*')
plot(x, y, col = 'blue', pch = '-')
plot(x, y, col = 'blue', pch = 'o')
plot(x, y, col = 'blue', pch = 'l')
plot(x, y, col = 'blue', pch = 'VVV')
plot(x, y, col = 'blue', pch = 'VVVVVVVVVV')
plot(x, y, col = 'blue', pch = 'W')
plot(x, y, col = 'blue', pch = '`')
plot(x, y, col = 'blue', pch = 's')
plot(x, y, col = 'blue', pch = '1')
plot(x, y, col = 'blue', pch = '2')
plot(x, y, col = 'blue', pch = 2)
plot(x, y, col = 'blue', pch = 3)
plot(x, y, col = 'blue', pch = 4)
plot(x, y, col = 'blue', pch = 5)
plot(x, y, col = 'blue', pch = 6)
plot(x, y, col = 'blue', pch = "o")
plot(x, y, col = 'blue', pch = "o", fill = 'yellow')
plot(x, y, col = 'blue', pch = "o")
plot(x, y, col = 'blue', pch = "o")
plot(x, y, col = 'blue', pch = 2)
plot(x, y, col = 'blue', pch = 1)
?plot
plot(x, y, col = 'blue', type = "h")
plot(x, y, col = 'blue', type = "l")
plot(x, y, col = 'blue', type = "p")
plot(x, y, col = 'blue', type = "b")
plot(x, y, col = 'blue', type = "h")
plot(x, y, col = 'blue', type = "s")
plot(x, y, col = 'blue', type = "S")
plot(x, y, col = 'blue', type = "o")
plot(x, y, col = 'blue', type = "o", bg = 'yellow')
plot(x, y, col = 'blue', type = "o", par(bg = 'yellow'))
plot(x, y, col = 'blue', type = "h", par(bg = 'yellow'))
plot(x, y, col = 'blue', type = "p", pch = 2)
plot(x, y, col = 'blue', type = "p", pch = 3)
plot(x, y, col = 'blue', type = "p", pch = 1)
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/test2')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/test3')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
?iuf
?if
)
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
runApp('Month 9 - Data Products/Week4_PA')
shiny::runApp('Month10-CapstoneProject/final/en_US/Final_tables/text_predictor')
predictor("some interesting things")
setwd("C:/Users/matth_000/Desktop/Coursera/Month10-CapstoneProject/final/en_US/Final_tables")
library(data.table)
unigrams <- as.data.table(read.table("unigrams.txt"))
unigrams$unique.values <- as.character(unigrams$unique.values)
bigrams_splitted <- as.data.table(read.table("bigrams_splitted.txt"))
bigrams_splitted$first_words <- as.character(bigrams_splitted$first_words)
bigrams_splitted$last_word <- as.character(bigrams_splitted$last_word)
trigrams_splitted <- as.data.table(read.table("trigrams_splitted.txt"))
trigrams_splitted$first_words <- as.character(trigrams_splitted$first_words)
trigrams_splitted$last_word <- as.character(trigrams_splitted$last_word)
fourgrams_splitted <- as.data.table(read.table("fourgrams_splitted.txt"))
fourgrams_splitted$first_words <- as.character(fourgrams_splitted$first_words)
fourgrams_splitted$last_word <- as.character(fourgrams_splitted$last_word)
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0(" ", new_string), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
return(getter_two[1:4])
}
trigram_finder <- function(splitted_string) {
new_string = paste(splitted_string[1:2], collapse = " ")
finder_three <- grepl(paste0(" ", new_string), trigrams_splitted$first_words, ignore.case = TRUE)
getter_three<- trigrams_splitted$last_word[finder_three]
return(getter_three[1:4])
}
fourgram_finder <- function(splitted_string) {
new_string = paste(splitted_string[1:3], collapse = " ")
finder_four <- grepl(paste0(" ", new_string), fourgrams_splitted$first_words, ignore.case = TRUE)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(getter_four[1:4])
}
unigram_finder <- function(number) {
random_words <- c()
for (i in 1:number) {
word <- unigrams$unique.values[sample(1:30, 1)]
random_words <- c(random_words, word)
}
return(random_words)
}
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
splitted_string <- splitted_string[(len_string - 2):len_string]
results <- fourgram_finder(splitted_string)
if (sum(is.na(results[1:4])) == 0) {
return(results[1:4])
} else if (sum(is.na(results[1:4])) == 1) {
results2 <- trigram_finder(splitted_string[2:3])
if (sum(is.na(results2[1])) == 0) {
return(c(results[1:3], results2[1]))
} else if (sum(is.na(results2[1])) == 1) {
results2_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results2_sub[1])) == 0) {
return(c(results[1:3], results2_sub[1]))
} else {
results2_sub_sub <- unigram_finder(1)
return(c(results[1:3]), results2_sub_sub[1])
}
}
} else if (sum(is.na(results[1:4])) == 2) {
results3 <- trigram_finder(splitted_string[2:3])
if (sum(is.na(results3[1:2])) == 0) {
return(c(results[1:2], results3[1:2]))
} else if (sum(is.na(results3[1:2])) == 1) {
results3_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results3_sub)) == 0) {
return(c(results[1:2], results3_sub[1:2]))
} else {
results3_sub_sub <- unigram_finder(2)
return(c(results[1:2]), results3_sub_sub[1:2])
}
}
}
else if (sum(is.na(results[1:4])) == 3) {
results4 <- trigram_finder(splitted_string[2:3])
if (sum(is.na(results4[1:3])) == 0) {
return(c(results4[1], results4[1:3]))
} else if (sum(is.na(results4[1:3])) == 1) {
results4_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results4_sub)) == 0) {
return(c(results[1], results4_sub[1:3]))
} else {
results4_sub_sub <- unigram_finder(3)
return(c(results[1]), results4_sub_sub[1:3])
}
}
}
else if (sum(is.na(results[1:4])) == 4) {
results5 <- trigram_finder(splitted_string[2:3])
if (sum(is.na(results5[1:4])) == 0) {
return(results5[1:4])
} else if (sum(is.na(results5[1:4])) == 1) {
results5_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results5_sub)) == 0) {
return(results5_sub[1:4])
} else {
results5_sub_sub <- unigram_finder(4)
return(c(results5[1:3], results5_sub_sub[1]))
}
} else if (sum(is.na(results5[1:4])) == 2) {
results6_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results6_sub)) == 0) {
return(c(results5[1:2], results5_sub[1:2]))
} else {
results6_sub_sub <- unigram_finder(2)
return(c(results5[1:2], results6_sub_sub[1:4]))
}
} else if (sum(is.na(results5[1:4])) == 3) {
results7_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results7_sub)) == 0) {
return(c(results5[1], results7_sub[1:3]))
} else {
results7_sub_sub <- unigram_finder(4)
return(c(results5[1], results7_sub_sub[1]))
}
} else if (sum(is.na(results5[1:4])) == 4) {
results8_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results8_sub)) == 0) {
return(results8_sub[1:4])
} else {
results8_sub_sub <- unigram_finder(4)
return(results8_sub_sub[1:4])
}
}
}
} else if (len_string == 2) {
results <- trigram_finder(splitted_string)
if (sum(is.na(results[1:4])) == 0) {
return(results[1:4])
} else if (sum(is.na(results[1:4])) == 1) {
results2 <- bigram_finder(splitted_string[2])
return(c(results[1:3], results2[1]))
} else if (sum(is.na(results[1:4])) == 2) {
results3 <- bigram_finder(splitted_string[2])
return(c(results[1:2], results3[1:2]))
} else if (sum(is.na(results[1:4])) == 3) {
results4 <- bigram_finder(splitted_string[2])
return(c(results[1], results4[1:3]))
} else if (sum(is.na(results[1:4])) == 4) {
results5 <- bigram_finder(splitted_string[2])
if (sum(is.na(results5[1:4])) == 0) {
return(results5[1:4])
} else if (sum(is.na(results5[1:4])) == 1) {
results5_sub <- unigram_finder(1)
return(c(results5[1:3], results5_sub[1]))
} else if (sum(is.na(results5[1:4])) == 2) {
results6_sub <- unigram_finder(2)
return(c(results5[1:2], results5_sub[2]))
} else if (sum(is.na(results5[1:4])) == 3) {
results7_sub <- unigram_finder(3)
return(c(results5[1], results5_sub[1:3]))
} else if (sum(is.na(results5[1:4])) == 4) {
results8_sub <- unigram_finder(4)
return(results8_sub[1:4])
}
}
} else if (len_string == 1) {
results <- bigram_finder(splitted_string)
if (sum(is.na(results)) == 0) {
return(results)
} else if (sum(is.na(results)) == 1) {
results2 <- unigram_finder(1)
return(c(results[1:3], results2[1]))
} else if (sum(is.na(results)) == 2) {
results3 <- unigram_finder(2)
return(c(results[1:2], results3[1:2]))
} else if (sum(is.na(results)) == 3) {
results4 <- unigram_finder(3)
return(c(results[1], results4[1:3]))
} else if (sum(is.na(results)) == 4) {
results5 <- unigram_finder(4)
return(results5[1:4])
}
}
}
predictor("alsdkfl alskdfla")
predictor("it is")
predictor("some interesting things")
runApp('text_predictor')
predictor("some interesting things")
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
splitted_string <- splitted_string[(len_string - 2):len_string]
results <- fourgram_finder(splitted_string)
if (sum(is.na(results[1:4])) == 0) {
return(results[1:4])
} else if (sum(is.na(results[1:4])) == 1) {
results2 <- trigram_finder(splitted_string[2:3])
if (sum(is.na(results2[1])) == 0) {
return(c(results[1:3], results2[1]))
} else if (sum(is.na(results2[1])) == 1) {
results2_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results2_sub[1])) == 0) {
return(c(results[1:3], results2_sub[1]))
} else {
results2_sub_sub <- unigram_finder(1)
return(c(results[1:3]), results2_sub_sub[1])
}
}
} else if (sum(is.na(results[1:4])) == 2) {
results3 <- trigram_finder(splitted_string[2:3])
if (sum(is.na(results3[1:2])) == 0) {
return(c(results[1:2], results3[1:2]))
} else if (sum(is.na(results3[1:2])) == 1) {
results3_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results3_sub)) == 0) {
return(c(results[1:2], results3_sub[1:2]))
} else {
results3_sub_sub <- unigram_finder(2)
return(c(results[1:2]), results3_sub_sub[1:2])
}
}
}
else if (sum(is.na(results[1:4])) == 3) {
results4 <- trigram_finder(splitted_string[2:3])
if (sum(is.na(results4[1:3])) == 0) {
return(c(results4[1], results4[1:3]))
} else if (sum(is.na(results4[1:3])) == 1) {
results4_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results4_sub)) == 0) {
return(c(results[1], results4_sub[1:3]))
} else {
results4_sub_sub <- unigram_finder(3)
return(c(results[1]), results4_sub_sub[1:3])
}
}
}
else if (sum(is.na(results[1:4])) == 4) {
results5 <- trigram_finder(splitted_string[2:3])
if (sum(is.na(results5[1:4])) == 0) {
return(results5[1:4])
} else if (sum(is.na(results5[1:4])) == 1) {
results5_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results5_sub)) == 0) {
return(results5_sub[1:4])
} else {
results5_sub_sub <- unigram_finder(4)
return(c(results5[1:3], results5_sub_sub[1]))
}
} else if (sum(is.na(results5[1:4])) == 2) {
results6_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results6_sub)) == 0) {
return(c(results5[1:2], results6_sub[1:2]))
} else {
results6_sub_sub <- unigram_finder(2)
return(c(results5[1:2], results6_sub_sub[1:4]))
}
} else if (sum(is.na(results5[1:4])) == 3) {
results7_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results7_sub)) == 0) {
return(c(results5[1], results7_sub[1:3]))
} else {
results7_sub_sub <- unigram_finder(4)
return(c(results5[1], results7_sub_sub[1]))
}
} else if (sum(is.na(results5[1:4])) == 4) {
results8_sub <- bigram_finder(splitted_string[3])
if (sum(is.na(results8_sub)) == 0) {
return(results8_sub[1:4])
} else {
results8_sub_sub <- unigram_finder(4)
return(results8_sub_sub[1:4])
}
}
}
} else if (len_string == 2) {
results <- trigram_finder(splitted_string)
if (sum(is.na(results[1:4])) == 0) {
return(results[1:4])
} else if (sum(is.na(results[1:4])) == 1) {
results2 <- bigram_finder(splitted_string[2])
return(c(results[1:3], results2[1]))
} else if (sum(is.na(results[1:4])) == 2) {
results3 <- bigram_finder(splitted_string[2])
return(c(results[1:2], results3[1:2]))
} else if (sum(is.na(results[1:4])) == 3) {
results4 <- bigram_finder(splitted_string[2])
return(c(results[1], results4[1:3]))
} else if (sum(is.na(results[1:4])) == 4) {
results5 <- bigram_finder(splitted_string[2])
if (sum(is.na(results5[1:4])) == 0) {
return(results5[1:4])
} else if (sum(is.na(results5[1:4])) == 1) {
results5_sub <- unigram_finder(1)
return(c(results5[1:3], results5_sub[1]))
} else if (sum(is.na(results5[1:4])) == 2) {
results6_sub <- unigram_finder(2)
return(c(results5[1:2], results5_sub[2]))
} else if (sum(is.na(results5[1:4])) == 3) {
results7_sub <- unigram_finder(3)
return(c(results5[1], results5_sub[1:3]))
} else if (sum(is.na(results5[1:4])) == 4) {
results8_sub <- unigram_finder(4)
return(results8_sub[1:4])
}
}
} else if (len_string == 1) {
results <- bigram_finder(splitted_string)
if (sum(is.na(results)) == 0) {
return(results)
} else if (sum(is.na(results)) == 1) {
results2 <- unigram_finder(1)
return(c(results[1:3], results2[1]))
} else if (sum(is.na(results)) == 2) {
results3 <- unigram_finder(2)
return(c(results[1:2], results3[1:2]))
} else if (sum(is.na(results)) == 3) {
results4 <- unigram_finder(3)
return(c(results[1], results4[1:3]))
} else if (sum(is.na(results)) == 4) {
results5 <- unigram_finder(4)
return(results5[1:4])
}
}
}
predictor("some interesting things")
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
