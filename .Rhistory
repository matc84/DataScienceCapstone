trigrams_splitted <- as.data.table(read.table("trigrams.txt"))
fourgrams_splitted <- as.data.table(read.table("fourgrams.txt"))
library(quanteda)
library(readtext)
library(data.table)
library(sqldf)
unigrams <- as.data.table(read.table("unigrams.txt"))
bigrams_splitted <- as.data.table(read.table("bigrams_splitted.txt"))
trigrams_splitted <- as.data.table(read.table("trigrams_splitted.txt"))
fourgrams_splitted <- as.data.table(read.table("fourgrams_splitted.txt"))
grep("how about", trigrams_splitted)
grep("how about", trigrams_splitted$first_words)
finder <- grep("how about", trigrams_splitted$first_words)
class(finder)
trigrams_splitted$last_word[finder]
finder <- grepl("how about", trigrams_splitted$first_words)
trigrams_splitted$last_word[finder]
getter<- trigrams_splitted$last_word[finder]
class(getter)
as.character(getter)
class(trigrams_splitted$first_words)
class(trigrams_splitted$last_word)
trigrams_test <- as.character(as.data.table(trigrams_splitted))
finder <- grepl("how about", trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
getter
finder <- grepl("how about", trigrams_splitted_test$first_words)
finder <- grepl("how about", trigrams_test$first_words)
trigrams_test
unigrams$unique.values <- as.character(unigrams$unique.values)
#bigrams_splitted <- as.data.table(read.table("bigrams_splitted.txt"))
bigrams_splitted$first_words <- as.character(bigrams_splitted$first_words)
bigrams_splitted$last_word <- as.character(bigrams_splitted$last_word)
#trigrams_splitted <- as.data.table(read.table("trigrams_splitted.txt"))
trigrams_splitted$first_words <- as.character(trigrams_splitted$first_words)
trigrams_splitted$last_word <- as.character(trigrams_splitted$last_word)
#fourgrams_splitted <- as.data.table(read.table("fourgrams_splitted.txt"))
fourgrams_splitted$first_words <- as.character(fourgrams_splitted$first_words)
fourgrams_splitted$last_word <- as.character(fourgrams_splitted$last_word)
## Find data
next_word_predictor <- function(string) {
finder <- grepl(string, trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
}
next_word_predictor("hello there")
next_word_predictor <- function(string) {
finder <- grepl(string, trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
return(getter)
}
next_word_predictor("hello there")
next_word_predictor("how about")
class(getter)
finder <- grepl(string, trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
class(getter)
finder <- grepl(string, trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
finder <- grepl("string"hello there"", trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
finder <- grepl(hello there"", trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
finder <- grepl(hello there", trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
finder <- grepl("hello there", trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
class(getter)
gett[1:3]
getter[1:3]
next_word_predictor <- function(string) {
finder <- grepl(string, trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
return(getter[1:3])
}
next_word_predictor("how about")
next_word_predictor <- function(string) {
finder <- grepl(string, trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
return(paste(string, getter[1:3]))
}
next_word_predictor("how about")
next_word_predictor <- function(string) {
finder <- grepl(string, trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
return(paste(string, getter[1]))
}
next_word_predictor("how about")
next_word_predictor("what about")
next_word_predictor("about the")
next_word_predictor("the same")
next_word_predictor("james")
next_word_predictor("james he")
next_word_predictor("my baby")
next_word_predictor("baby is")
next_word_predictor_2 <- function(string) {
finder <- grepl(string, fourgrams_splitted$first_words)
getter<- fourgrams_splitted$last_word[finder]
return(paste(string, getter[1:3]))
}
next_word_predictor_2("baby is")
next_word_predictor_2("how about")
next_word_predictor_2("how about some")
View(fourgrams_splitted)
next_word_predictor_2("what is your")
next_word_predictor_2("your")
next_word_predictor_2("your favorite")
next_word_predictor_2("your favorite to")
next_word_predictor_2("your favorite flavor")
next_word_predictor_2("most of the")
next_word_predictor_2("a lot of")
next_word_predictor_2("a case of")
next_word_predictor("case of")
next_word_predictor <- function(string) {
finder <- grepl(string, trigrams_splitted$first_words)
getter<- trigrams_splitted$last_word[finder]
return(paste(string, getter[1:4]))
}
next_word_predictor("case of")
next_word_predictor("mean the")
next_word_predictor("me the")
next_word_predictor_2("make me the")
next_word_predictor_fourgrams <- function(string) {
finder_four <- grepl(string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(string, getter_four[1:3]))
next_word_predictor_2("make me the")
}
next_word_predictor_fourgrams <- function(string) {
finder_four <- grepl(string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(string, getter_four[1:3]))
}
next_word_predictor_fourgrams("matt connell is")
next_word_predictor_fourgrams("matt")
next_word_predictor_fourgrams("matt much")
next_word_predictor_fourgrams("much")
next_word_predictor_fourgrams("much")
text <- "how about the"
unlist(strsplit(text, split = " "))
len(unlist(strsplit(text, split = " ")))
length(unlist(strsplit(text, split = " ")))
grep(" ", text)
grep("t", text)
grepl("t", text)
grepl(" ", text)
?grep
regexec(" ", text)
regexpr(" ", text)
regexpr("t", text)
text
grep(" ", value = TRUE, text)
grep(" ", value = TRUE, text, fixed  = TRUE)
grep(" ", text, fixed  = TRUE)
grep(" ", text, useBytes = TRUE)
grep(" ", text, invert = TRUE)
grepRAW(" ", text, invert = TRUE)
grepRaw(" ", text, invert = TRUE)
grepRaw(" ", text)
grep("^ ", text)
grep(" ", text)
grep("[a-z] ", text)
grep("[a-z] [a-z", text)
grep("[a-z] [a-z]", text)
grep("[a-z] [a-z] [a-z]", text)
length(unlist(strsplit(text, split = " ")))
unlist(strsplit(text, split = " "))
text = "how about the weather"
unlist(strsplit(text, split = " "))
unlist(strsplit(text, split = " "))[1]
unlist(strsplit(text, split = " "))[2:4]
unlisted <- unlist(strsplit(text, split = " "))
unlisted
length(unlisted)
new_string = paste(unlisted[(4-2):4])
new_string
new_string = paste0(unlisted[(4-2):4])
new_string
new_string = paste(unlisted[(4-2):4], sep = "")
new_string
new_string = paste(unlisted[(4-2):4], collapse = "", sep = "")
new_string
new_string = paste(unlisted[(4-2):4], collapse = "", sep = " ")
new_string
new_string = paste(unlisted[(4-2):4], collapse = " ", sep = " ")
new_string
new_string = paste(unlisted[(4-2):4], collapse = " ")
new_string
predictor <- function(string) {
splitted_string <- unlist(strsplit(text, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
next_word_predictor_fourgrams <- function(new_string) {
finder_four <- grepl(new_string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(new_string, getter_four[1:3]))
}}}
predictor("one of the")
predictor <- function(string) {
splitted_string <- unlist(strsplit(text, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
next_word_predictor_fourgrams <- function(new_string) {
finder_four <- grepl(new_string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(new_string, getter_four[1:3]))
}}                   return(paste(new_string, getter_four[1:3]))}
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
next_word_predictor_fourgrams <- function(new_string) {
finder_four <- grepl(new_string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(new_string, getter_four[1:3]))
}}                    }
predictor("one of the")
predictor("one of the most")
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
next_word_predictor_fourgrams <- function(new_string) {
finder_four <- grepl(new_string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
}}             return(paste(new_string, getter_four[1:3]))        }
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
next_word_predictor_fourgrams <- function(new_string) {
finder_four <- grepl(new_string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
}return(paste(new_string, getter_four[1:3]))  }                   }
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
next_word_predictor_fourgrams <- function(new_string) {
finder_four <- grepl(new_string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(new_string, getter_four[1:3]))
}  }                   }
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
return(new_string)
}}
predictor("one of the most")
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
finder_four <- grepl(new_string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(new_string, getter_four[1:3]))
}  }
predictor("one of the most")
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
finder_four <- grepl(new_string, fourgrams_splitted$first_words)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(new_string, getter_four[1:3]))
} else if (len_string == 2) {
new_string = paste(splitted_string[(len_string-1):len_string], collapse = " ")
finder_three <- grepl(new_string, trigrams_splitted$first_words)
getter_three<- trigrams_splitted$last_word[finder_three]
return(paste(new_string, getter_three[1:4]))
} else if (len_string == 1) {
new_string = string
finder_two <- grepl(new_string, bigrams_splitted$first_words)
getter_two<- bigrams_splitted$last_word[finder_two]
return(paste(new_string, getter_two[1:4]))
}
}
predictor("one of the most")
predictor("of the most")
predictor("the most")
predictor("most")
predictor("most important")
predictor("most important thing")
predictor("most important thing")
predictor("most important")
predictor("most")
predictor("the")
start <- Sys.time()
predict("the")
end <- Sys.time()
end - start
start <- Sys.time()
predictor("the")
end <- Sys.time()
end - sta
start <- Sys.time()
predictor("the")
end <- Sys.time()
end - start
class(end-start)
as.Date(end - start)
class(start)
as.POSIXct(end-start)
change <- end - start
class(change)
as.POSIXct(change)
as.POSIXct.POSIXlt(change)
as.posixlt(change)
as.POSIXlt(change)
as.POSIXct.numeric(change)
as.numeric(change)
start <- Sys.time()
predictor("the")
end <- Sys.time()
paste(as.numeric(end - start), "seconds")
start <- Sys.time()
predictor("the")
end <- Sys.time()
paste(round(as.numeric(end - start),3), "seconds")
shiny::runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
predictor("the")
predictor("The")
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
finder_four <- grepl(new_string, fourgrams_splitted$first_words, ignore.case = TRUE)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(paste(new_string, getter_four[1:3]))
} else if (len_string == 2) {
new_string = paste(splitted_string[(len_string-1):len_string], collapse = " ")
finder_three <- grepl(new_string, trigrams_splitted$first_words, ignore.case = TRUE)
getter_three<- trigrams_splitted$last_word[finder_three]
return(paste(new_string, getter_three[1:4]))
} else if (len_string == 1) {
new_string = string
finder_two <- grepl(new_string, bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
return(paste(new_string, getter_two[1:4]))
}
}
predictor("The")
predictor("I")
predictor("I'm")
predictor("i'm")
predictor("We")
predictor("WHAT")
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
finder_four <- grepl(new_string, fourgrams_splitted$first_words, ignore.case = TRUE)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(getter_four[1:3])
} else if (len_string == 2) {
new_string = paste(splitted_string[(len_string-1):len_string], collapse = " ")
finder_three <- grepl(new_string, trigrams_splitted$first_words, ignore.case = TRUE)
getter_three<- trigrams_splitted$last_word[finder_three]
return(getter_three[1:4])
} else if (len_string == 1) {
new_string = string
finder_two <- grepl(new_string, bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
return(getter_two[1:4])
}
}
runApp('temp_milestone_week_2_files/text_prediction_app')
predictor("WHAT")
runApp('temp_milestone_week_2_files/text_prediction_app')
predictor("WHAT \")
)
)
))))))
predictor("WHAT ")
text <- "what"
paste(text, " ")
paste(text, "")
text <- "what "
strsplit(text)
strsplit(text, " ")
unlist(strsplit(text, " "))
text <- "what"
unlist(strsplit(text, " "))
text <- "what  "
unlist(strsplit(text, " "))
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
new_string = paste(splitted_string[(len_string-2):len_string], collapse = " ")
finder_four <- grepl(new_string, fourgrams_splitted$first_words, ignore.case = TRUE)
getter_four<- fourgrams_splitted$last_word[finder_four]
return(getter_four[1:3])
} else if (len_string == 2) {
new_string = paste(splitted_string[(len_string-1):len_string], collapse = " ")
finder_three <- grepl(new_string, trigrams_splitted$first_words, ignore.case = TRUE)
getter_three<- trigrams_splitted$last_word[finder_three]
return(getter_three[1:4])
} else if (len_string == 1) {
new_string = unlist(strsplit(string, " "))
finder_two <- grepl(new_string, bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
return(getter_two[1:4])
}
}
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
start_time <- Sys.time()
predictor("how are")
end_time <- Sys.time()
cat("Your search took"), as.numeric(end_time-start_time)
start_time <- Sys.time()
predictor("how are")
end_time <- Sys.time()
cat("Your search took", as.numeric(end_time-start_time)
)
start_time <- Sys.time()
predictor("how are")
end_time <- Sys.time()
cat("Your search took", as.numeric(end_time-start_time))
runApp('temp_milestone_week_2_files/text_prediction_app')
start_time <- Sys.time()
predictor("how are")
end_time <- Sys.time()
cat("Your search took", as.numeric(end_time-start_time), seconds)
start_time <- Sys.time()
predictor("how are")
end_time <- Sys.time()
cat("Your search took", as.numeric(end_time-start_time), "seconds")
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
cat("Your search took", as.numeric(end_time-start_time), "seconds")
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
system.time(result <- predictor("how"))
timer <- system.time(result <- predictor("how"))
class(timer)
as.numeric(timer)
as.numeric(timer)[1]
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('temp_milestone_week_2_files/text_prediction_app')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
