getter_two <- c(getter_two[1:(4-)], unigram_finder(sum_na))
}
}
return(getter_two[1:4])
}
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na >=1) {
for (i in 1:sum_na) {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
}
}
return(getter_two[1:4])
}
bigram_finder("What what")
test <- c("a", "b", "c", "d")
test[1:3]
test[1:1]
test[0:0]
c(test[0:0], test[1])
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na >=4) {
getter_two <- unigram_finder(sum_na)
} else if (sum_na <= 4) {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
}
return(getter_two[1:4])
}
bigram_finder("what what")
bigram_finder("what asdfasdfa\")
)
bigram_finder("what asdfasdfa")
bigram_finder("it is")
bigram_finder("what a")
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na >=4) {
getter_two <- unigram_finder(sum_na)
} else if (sum_na <= 4) {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
} else {
return(getter_two[1:4])
}
}
bigram_finder("what a")
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na >=4) {
getter_two <- unigram_finder(sum_na)
} else if (sum_na < 4) {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
} else {
return(getter_two[1:4])
}
}
bigram_finder("what a")
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na >=4) {
getter_two <- unigram_finder(sum_na)
} else if (sum_na < 4) {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
}
return(getter_two[1:4])
}
bigram_finder("what a")
bigram_finder("he is")
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na ==4) {
getter_two <- unigram_finder(sum_na)
} else if (sum_na < 4) {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
}
return(getter_two[1:4])
}
bigram_finder("he is")
unigram_finder(3)
unigram_finder(4)
test
sum(is.na(test))
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na ==4) {
getter_two <- unigram_finder(sum_na)
} else if (sum_na < 4) {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
return(getter_two)
}
return(getter_two[1:4])
}
sum(is.na(test))
bigram_finder("he is")
bigram_finder("man of")
test
test[1:(4-0)]
if (sum(is.na(test)) == 4) {test2 <- unigram_finder(4)}
test2
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na ==4) {
getter_two <- unigram_finder(sum_na)
return(getter_two)
} else if (sum_na < 4) {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
return(getter_two)
}
return(getter_two[1:4])
}
bigram_finder("man of")
if (sum_na ==4) {
getter_two <- unigram_finder(sum_na)
return(getter_two)
} else {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
return(getter_two)
}
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na ==4) {
getter_two <- unigram_finder(sum_na)
return(getter_two)
} else {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
return(getter_two)
}
return(getter_two[1:4])
}
bigram_finder("man of")
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na < 4)  {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
return(getter_two)
} else {
getter_two <- unigram_finder(sum_na)
return(getter_two)
}
return(getter_two[1:4])
}
bigram_finder("man of")
bigram_finder("how about")
bigram_finder(c("how", "about")
)
test <- c("how", "about")
bigram_finder(test)
paste0("\\<", test, "\\>")
paste0("\\<", "how about", "\\>")
grepl("\\<how about\\>", bigrams_splitted$first_words)
sum(grepl("\\<how about\\>", bigrams_splitted$first_words))
bigram_finder("what")
bigram_finder("witches")
unigram_finder(0)
unigram_finder <- function(number) {
random_words <- c()
for (i in 1:number) {
words <- unigrams$unique.values[(0 + number):i]
}
return(words)
}
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na < 4)  {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
return(getter_two)
} else {
getter_two <- unigram_finder(sum_na)
return(getter_two)
}
return(getter_two[1:4])
}
unigram_finder(0)
bigram_finder("witches")
test
test[1:0]
unigram_finder <- function(number) {
random_words <- c()
words <- unigrams$unique.values[1:number]
return(words)
}
bigram_finder <- function(splitted_string) {
new_string = splitted_string
finder_two <- grepl(paste0("\\<", new_string, "\\>"), bigrams_splitted$first_words, ignore.case = TRUE)
getter_two<- bigrams_splitted$last_word[finder_two]
sum_na <- sum(is.na(getter_two[1:4]))
if (sum_na < 4)  {
getter_two <- c(getter_two[1:(4-sum_na)], unigram_finder(sum_na))
return(getter_two[1:4])
} else {
getter_two <- unigram_finder(sum_na)
return(getter_two[1:4])
}
return(getter_two[1:4])
}
bigram_finder("witches")
bigram_finder("what")
bigram_finder("hat")
bigram_finder("alsdkjfaklsdjf")
trigram_finder <- function(splitted_string) {
new_string = paste(splitted_string[1:2], collapse = " ")
finder_three <- grepl(paste0("\\<", new_string, "\\>"), trigrams_splitted$first_words, ignore.case = TRUE)
getter_three<- trigrams_splitted$last_word[finder_three]
sum_na <- sum(is.na(getter_three[1:4]))
if (sum_na < 4)  {
getter_three <- c(getter_three[1:(4-sum_na)], bigram_finder(splitted_string[2]))
return(getter_three[1:4])
} else {
getter_three <- bigram_finder(splitted_string[2])
return(getter_three[1:4])
}
return(getter_three[1:4])
}
trigram_finder("james and")
trigram_finder("what what")
trigram_finder("it is")
trigram_finder <- function(splitted_string) {
new_string = paste(splitted_string[1:2], collapse = " ")
finder_three <- grepl(paste0("\\<", new_string, "\\>"), trigrams_splitted$first_words, ignore.case = TRUE)
getter_three<- trigrams_splitted$last_word[finder_three]
sum_na_tri <- sum(is.na(getter_three[1:4]))
if (sum_na_tri < 4)  {
getter_three <- c(getter_three[1:(4-sum_na_tri)], bigram_finder(splitted_string[2]))
return(getter_three[1:4])
} else {
getter_three <- bigram_finder(splitted_string[2])
return(getter_three[1:4])
}
return(getter_three[1:4])
}
trigram_finder("it is")
trigram_finder(c("it", "is")
)
trigram_finder(c("what", "what"))
trigram_finder(c("james", "and"))
trigram_finder <- function(splitted_string) {
new_string = paste(splitted_string[1:2], collapse = " ")
finder_three <- grepl(paste0("\\<", new_string, "\\>"), trigrams_splitted$first_words, ignore.case = TRUE)
getter_three<- trigrams_splitted$last_word[finder_three]
sum_na <- sum(is.na(getter_three[1:4]))
if (sum_na < 4)  {
getter_three <- c(getter_three[1:(4-sum_na)], bigram_finder(splitted_string[2]))
return(getter_three[1:4])
} else {
getter_three <- bigram_finder(splitted_string[2])
return(getter_three[1:4])
}
return(getter_three[1:4])
}
trigram_finder(c("james", "and"))
trigram_finder(c("what", "what"))
trigram_finder(c("it", "is"))
trigram_finder <- function(splitted_string) {
new_string = paste(splitted_string[1:2], collapse = " ")
finder_three <- grepl(paste0("\\<", new_string, "\\>"), trigrams_splitted$first_words, ignore.case = TRUE)
getter_three<- trigrams_splitted$last_word[finder_three]
sum_na <- sum(is.na(getter_three[1:4]))
if (sum_na < 4)  {
getter_three <- c(getter_three[1:(4-sum_na)], bigram_finder(splitted_string[2]))
return(getter_three[1:4])
} else {
getter_three <- bigram_finder(splitted_string[2])
return(getter_three[1:4])
}
}
trigram_finder(c("it", "is"))
trigram_finder(c("what", "what"))
trigram_finder(c("james", "and"))
fourgram_finder <- function(splitted_string) {
new_string = paste(splitted_string[1:3], collapse = " ")
finder_four <- grepl(paste0("\\<", new_string, "\\>"), fourgrams_splitted$first_words, ignore.case = TRUE)
getter_four<- fourgrams_splitted$last_word[finder_four]
sum_na <- sum(is.na(getter_four[1:4]))
if (sum_na < 4)  {
getter_four <- c(getter_four[1:(4-sum_na)], trigram_finder(splitted_string[2:3]))
return(getter_four[1:4])
} else {
getter_four <- trigram_finder(splitted_string[2:3])
return(getter_four[1:4])
}
}
fourgram_finder("to", "online", "adult")
fourgram_finder(c("to", "online", "adult"))
runApp('text_predictor')
fourgram_finder(c("his", "own", "accord"))
fourgram_finder(c("for", "the", "invite"))
fourgram_finder(c("and", "potato", "salad"))
trigram_finder(c("candidates", "fo"))
fourgram_finder(c("his", "own", "republican"))
fourgram_finder(c("know", "what", "to"))
fourgram_finder(c("longer", "be", "able"))
fourgram_finder(c("what", "im", "capable"))
fourgram_finder(c("what", "i'm", "capable"))
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
splitted_string <- splitted_string[(len_string - 2):len_string]
results <- fourgram_finder(splitted_string)
return(results[1:4])
} else if (len_string == 2) {
results <- trigram_finder(splitted_string)
return(results[1:4])
} else if (len_string == 1) {
results <- bigram_finder(splitted_string)
return(results5[1:4])
}
}
fourgram_finder(c("what", "i'm", "capable"))
fourgram_finder(c("what", "i'm", "capable"))
predictor("what I'm capable")
predictor("what are you")
predictor("what are")
predictor("asdfasdjflkajsdf lasdkjflkjsdf")
predictor("asdfasdjflkajsdf")
predictor <- function(string) {
splitted_string <- unlist(strsplit(string, split = " "))
len_string = length(splitted_string)
if (len_string >= 3) {
splitted_string <- splitted_string[(len_string - 2):len_string]
results <- fourgram_finder(splitted_string)
return(results[1:4])
} else if (len_string == 2) {
results <- trigram_finder(splitted_string)
return(results[1:4])
} else if (len_string == 1) {
results <- bigram_finder(splitted_string)
return(results[1:4])
}
}
predictor("asdfasdjflkajsdf")
runApp('text_predictor')
runApp('text_predictor')
strip_text <- function(string) {
string <- gsub("\[\]\(\)\{\}", "", string)
return(string)
}
strip_text <- function(string) {
string <- gsub("\\[\]\(\)\{\}", "", string)
return(string)
}
strip_text <- function(string) {
string <- gsub("\\[\\]\(\)\{\}", "", string)
return(string)
}
strip_text <- function(string) {
string <- gsub("\\[\\]\\(\\)\\{\\}", "", string)
return(string)
}
strip_text("{}{}[][][][]][[[]]][[{}]][")
strip_text <- function(string) {
string <- gsub("[\\[\\]\\(\\)\\{\\}]", "", string)
return(string)
}
strip_text("{}{}[][][][]][[[]]][[{}]][")
strip_text <- function(string) {
string <- gsub("[\\[][\\]][\\(][\\)][\\{][\\}]", "", string)
return(string)
}
strip_text("{}{}[][][][]][[[]]][[{}]][")
strip_text("l")
strip_text("[")
strip_text <- function(string) {
string2 <- gsub("[\\[][\\]][\\(][\\)][\\{][\\}]", "", string)
return(string2)
}
strip_text("[")
strip_text <- function(string) {
string2 <- gsub("[\\[|\\]|\\(|\\)|\\{|\\}]", "", string)
return(string2)
}
strip_text("[")
strip_text("{}{}[][][][]][[[]]][[{}]][")
strip_text <- function(string) {
string2 <- gsub("[\\[][|\\]][|\\(][|\\)][|\\{][|\\}]", "", string)
return(string2)
}
strip_text("{}{}[][][][]][[[]]][[{}]][")
strip_text <- function(string) {
string2 <- gsub("[\\[][|\\]][|\\(][|\\)][|\\{][|\\}]+", "", string)
return(string2)
}
strip_text("{}{}[][][][]][[[]]][[{}]][")
strip_text("[")
strip_text <- function(string) {
string2 <- gsub("[\\[]+[|\\]]+[|\\(]+[|\\)]+[|\\{]+[|\\}]+", "", string)
return(string2)
}
strip_text("[")
strip_text <- function(string) {
string2 <- gsub("(\\[[|\\]|\\(|\\)|\\{|\\})+", "", string)
return(string2)
}
strip_text("[")
strip_text("{}{}[][][][]][[[]]][[{}]][")
strip_text <- function(string) {
string2 <- gsub("(\\[|\\]|\\(|\\)|\\{|\\})+", "", string)
return(string2)
}
strip_text("{}{}[][][][]][[[]]][[{}]][")
strip_text("[")
strip_text("{}{}[][][][])][[[]()]][)[{()()}]][")
strip_text("hello")
strip_text("(hello)")
strip_text("(he[l]lo)")
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
install.packages()
install.packages("shinythemes")
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
getwd()
setwd("text_predictor")
getwd()
mkdir("www")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
setwd(..)
"C:/Users/matth_000/Desktop/Coursera/Month10-CapstoneProject/final/en_US/Final_tables"
grep(" I ", bigrams_splitted)
grep(" I ", bigrams_splitted$last_word)
grep(" I ", trigrams_splitted$last_word)
bigrams_splitted$last_word <- gsub(" I ", "I", bigrams_splitted$last_word, ignore.case = FALSE)
head(bigrams_splitted)
grep(" I ", bigrams_splitted$last_word)
write.table(bigrams_splitted, "bigrams_splitted.txt")
getwd()
setwd("C:/Users/matth_000/Desktop/Coursera/Month10-CapstoneProject/final/en_US/Final_tables/")
write.table(bigrams_splitted, "bigrams_splitted.txt")
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
runApp('text_predictor')
